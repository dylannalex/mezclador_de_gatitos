import streamlit as st

from utils import (
    load_images,
    load_model,
    linear_interpolation,
    tsne_visualization,
    calculate_tsne,
    image_to_bytes,
    array_to_pil
)

TITLE_COLOR = "#457B9D"
SUBTITLE_COLOR = "#1b7e82"
CAT_IMAGES = load_images()
MODEL = load_model()
IMAGES_PER_PAGE = 15
IMAGES_PER_ROW = 5
N_INTERPOLATIONS = 11

# Define language variables
LANGUAGES = {
    "es": {
        "title": "Mezclador de Gatitos üêà",
        "subtitle": "Seleccionar Im√°genes",
        "intro": """
            Bienvenido al mezclador de gatitos, una herramienta interactiva donde puedes combinar dos adorables 
            gatos y descubrir c√≥mo ser√≠an sus gatitos √∫nicos. ¬°Explora resultados sorprendentes y llenos de 
            ternura! ‚ú®
        """,
        "image_gallery": "Galer√≠a de Im√°genes",
        "select_images": """
            ¬°Explora nuestra galer√≠a y elige dos adorables gatitos para combinarlos y crear nuevas im√°genes 
            √∫nicas! Adem√°s, puedes visualizar las im√°genes en un mapa interactivo que muestra qu√© tan parecidos 
            son los gatitos entre s√≠. Este mapa se genera a partir del espacio latente, utilizando t-SNE para 
            reducir la dimensionalidad y hacer las similitudes m√°s f√°ciles de interpretar.
        """,
        "previous": "Anterior",
        "next": "Siguiente",
        "combined_kittens": "Gatitos Combinados",
        "combined_intro": """
            A continuaci√≥n, se observan las im√°genes generadas al combinar las caracter√≠sticas de los dos 
            gatitos seleccionados. El resultado incluye una transici√≥n visual que muestra c√≥mo se mezclan 
            sus rasgos distintivos, desde el primero hasta el segundo, en un recorrido lleno de encanto y 
            originalidad.
        """,
        "remove": "Eliminar",
        "select": "Seleccionar",
        "latent_space": "Visualizaci√≥n del espacio latente",
        "selected_images": "Im√°genes seleccionadas",
        "selected_intro": "Se han seleccionado las siguientes im√°genes para la cruza:",
        "real_image": "Imagen Real",
        "step": "Paso",
        "pagination": "Mostrando p√°gina {current} de {total}.",
        "made_by": "Hecho con ‚ù§Ô∏è por Dylan",
        "linkedin": "LinkedIn üîó",
    },
    "en": {
        "title": "Kitten Mixer üêà",
        "subtitle": "Select Images",
        "intro": """
            Welcome to the kitten mixer, an interactive tool where you can combine two adorable cats and discover 
            what their unique kittens would look like. Explore surprising and adorable results! ‚ú®
        """,
        "image_gallery": "Image Gallery",
        "select_images": """
            Explore our gallery and choose two adorable kittens to combine and create unique new images! Additionally, 
            you can view the images on an interactive map that shows how similar the kittens are to each other. This 
            map is generated from the latent space, using t-SNE to reduce dimensionality and make the similarities easier 
            to interpret.
        """,
        "previous": "Previous",
        "next": "Next",
        "combined_kittens": "Combined Kittens",
        "combined_intro": """
            Below are the images generated by combining the features of the two selected kittens. The result includes 
            a visual transition showing how their distinctive traits blend from the first to the second in a journey full 
            of charm and originality.
        """,
        "remove": "Remove",
        "select": "Select",
        "latent_space": "Latent Space Visualization",
        "selected_images": "Selected Images",
        "selected_intro": "The following images have been selected for mixing:",
        "real_image": "Real Image",
        "step": "Step",
        "pagination": "Showing page {current} of {total}.",
        "made_by": "Made with ‚ù§Ô∏è by Dylan",
        "linkedin": "LinkedIn üîó",
    },
}


def change_language(col):
    with col:
        if "language" not in st.session_state:
            st.session_state["language"] = "es"  # Default language is Spanish

        language = st.session_state["language"]
        lang_dict = LANGUAGES[language]

        # Button to toggle language
        if st.button("üåê English" if language == "es" else "üåê Espa√±ol"):
            st.session_state["language"] = "en" if language == "es" else "es"
            st.rerun()

        return lang_dict


def display_image_grid(images, page_number, images_per_page, images_per_row, lang_dict):
    """
    Display a grid of images with pagination.
    """
    start_idx = page_number * images_per_page
    end_idx = start_idx + images_per_page
    images_to_show = images[start_idx:end_idx]
    cols = st.columns(images_per_row, gap="small")

    for idx, img in enumerate(images_to_show):
        with cols[idx % images_per_row]:
            st.image(
                img,
                use_container_width=False,
                caption=f"Image {start_idx + idx + 1}",
                width=100,
            )
            if st.button(
                lang_dict["select"],
                key=f"select_{start_idx + idx}",
                use_container_width=False,
            ):
                if len(st.session_state["selected_images"]) < 2:
                    st.session_state["selected_images"].append(img)
                st.rerun()


def page_navigation(lang_dict):
    """
    Handles image gallery pagination and image selection.
    """
    if "page_number" not in st.session_state:
        st.session_state["page_number"] = 0

    total_pages = (len(CAT_IMAGES) - 1) // IMAGES_PER_PAGE
    page_number = st.session_state["page_number"]

    col1, col2 = st.columns([0.5, 0.5], gap="small")
    with col1:
        st.markdown(f"<h4>{lang_dict['image_gallery']}</h4>", unsafe_allow_html=True)
        st.markdown(
            lang_dict["pagination"].format(
                current=page_number + 1, total=total_pages + 1
            )
        )
        display_image_grid(
            CAT_IMAGES, page_number, IMAGES_PER_PAGE, IMAGES_PER_ROW, lang_dict
        )

        # Pagination buttons
        colA, _, colB = st.columns([0.1, 0.4, 0.1], gap="small")
        with colA:
            if st.button(lang_dict["previous"], key="prev_page"):
                if st.session_state["page_number"] > 0:
                    st.session_state["page_number"] -= 1
                    st.rerun()
        with colB:
            if st.button(lang_dict["next"], key="next_page"):
                if st.session_state["page_number"] < total_pages:
                    st.session_state["page_number"] += 1
                    st.rerun()

    with col2:
        st.markdown(f"<h4>{lang_dict['latent_space']}</h4>", unsafe_allow_html=True)
        st.write(" ")

        if "tsne_results" not in st.session_state:
            tsne_results = calculate_tsne(CAT_IMAGES)
            st.session_state["tsne_results"] = tsne_results

        tsne_results = st.session_state["tsne_results"]
        selected_indexes = [
            CAT_IMAGES.index(img) for img in st.session_state["selected_images"]
        ]

        tsne_visualization(tsne_results, selected_indexes)

        if st.session_state["selected_images"]:
            st.markdown(
                f"<h4>{lang_dict['selected_images']}</h4>", unsafe_allow_html=True
            )
            st.markdown(f"{lang_dict['selected_intro']}")
            sub_cols = st.columns([0.35, 0.25, 0.25, 0.35], gap="small")
            for idx, img in enumerate(st.session_state["selected_images"]):
                with sub_cols[idx + 1]:
                    st.image(
                        img,
                        use_container_width=False,
                        width=120,
                        caption=f"Imagen {idx + 1}",
                    )
                    if st.button(
                        lang_dict["remove"],
                        key=f"remove_{idx}",
                        use_container_width=False,
                    ):
                        st.session_state["selected_images"].remove(img)
                        st.rerun()


def main():
    """
    Main function to set up the app layout and logic.
    """

    lang_dict = LANGUAGES["es"]  # Default language is Spanish

    st.set_page_config(page_title="üêà", layout="wide")

    col1, col2, col3 = st.columns([0.8, 0.1, 0.1], gap="small")
    with col3:
        lang_dict = change_language(col2)

    with col1:
        st.markdown(
            f"<h1 style='color: {TITLE_COLOR};'>{lang_dict['title']}</h1>",
            unsafe_allow_html=True,
        )
        st.markdown(
            f"<p style='font-size: 18px;'>{lang_dict['intro']}</p>",
            unsafe_allow_html=True,
        )

    with col3:
        st.link_button(
            lang_dict["linkedin"],
            url="https://www.linkedin.com/in/dylan-tintenfich/",
            use_container_width=False,
        )

    if "selected_images" not in st.session_state:
        st.session_state["selected_images"] = []

    st.markdown(
        f"<h2 style='color: {SUBTITLE_COLOR};'>{lang_dict['subtitle']}</h2>",
        unsafe_allow_html=True,
    )
    st.markdown(
        f"<p style='font-size: 16px;'>{lang_dict['select_images']}</p>",
        unsafe_allow_html=True,
    )

    page_navigation(lang_dict)

    if len(st.session_state["selected_images"]) == 2:
        st.markdown(
            f"<h2 style='color: {SUBTITLE_COLOR};'>{lang_dict['combined_kittens']}</h2>",
            unsafe_allow_html=True,
        )
        st.markdown(
            f"<p style='font-size: 18px;'>{lang_dict['combined_intro']}</p>",
            unsafe_allow_html=True,
        )

        img_1, img_2 = st.session_state["selected_images"]

        interpolated_images = linear_interpolation(
            MODEL, img_1, img_2, "cpu", N_INTERPOLATIONS
        )
        all_images = [img_1] + interpolated_images + [img_2]

        cols = st.columns(len(all_images), gap="small")
        for i, img in enumerate(all_images):

            cols[i].image(img, caption=f"{lang_dict['step']} {i+1}", width=100)
           
            with cols[i]:
                if i == 0 or i == len(all_images) - 1:
                    image_pil = img
                else:
                    image_pil = array_to_pil(img)

                img_bytes = image_to_bytes(image_pil)
                st.download_button(
                    label="üì•",
                    data=img_bytes,
                    file_name=f"result_image_{i+1}.png",
                    mime="image/png",
                    use_container_width=True
                )

    st.markdown("<hr>", unsafe_allow_html=True)
    st.markdown(
        f"<p style='text-align: center;'>{lang_dict['made_by']}</p>",
        unsafe_allow_html=True,
    )

if __name__ == "__main__":
    main()
